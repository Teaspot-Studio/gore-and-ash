{-# START_FILE .gitignore #-}
.stack-work
*.sublime-workspace

{-# START_FILE LICENSE #-}
Copyright {{author-name}} (c) {{current-year}}

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of {{author-name}} nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
{-# START_FILE README.md #-}
{{name}}
====================

[![Build Status](https://travis-ci.org/Teaspot-Studio/{{name}}.svg?branch=master)](https://travis-ci.org/Teaspot-Studio/{{name}})

Core module of [gore-and-ash](https://github.com/teaspot-studio/gore-and-ash) game engine.

{-# START_FILE Setup.hs #-}
import Distribution.Simple
main = defaultMain

{-# START_FILE {{name}}.cabal #-}
name:                {{name}}
version:             0.1.0.0
synopsis:            Initial project template from stack
description:         Please see README.md
homepage:            https://github.com/{{github-username}}/{{name}}#readme
license:             BSD3
license-file:        LICENSE
author:              {{author-name}}
maintainer:          {{author-email}}
copyright:           {{copyright}}
category:            Game
build-type:          Simple
extra-source-files:  README.md
cabal-version:       >=1.10

flag examples
  description: Enable building of examples
  default:     False

library
  hs-source-dirs:      src
  exposed-modules:
    Game.GoreAndAsh.{{module-name}}
    Game.GoreAndAsh.{{module-name}}.API
    Game.GoreAndAsh.{{module-name}}.Module
  build-depends:
      base               >= 4.7      && < 5
    , bytestring         >= 0.10     && < 0.11
    , exceptions         >= 0.8      && < 0.9
    , gore-and-ash       >= 2.0.0.0  && < 2.1
    , monad-control      >= 1.0      && < 1.1
    , mtl                >= 2.2      && < 2.3
    , text               >= 1.2.1    && < 1.3
    , transformers       >= 0.4.2    && < 0.6
    , transformers-base  >= 0.4.4    && < 0.5

  default-language:    Haskell2010
  default-extensions:
    DataKinds
    DeriveGeneric
    FlexibleInstances
    FunctionalDependencies
    GeneralizedNewtypeDeriving
    InstanceSigs
    MultiParamTypeClasses
    OverloadedStrings
    RankNTypes
    RecordWildCards
    ScopedTypeVariables
    TypeFamilies
    UndecidableInstances

source-repository head
  type:     git
  location: https://github.com/ncrashed/{{name}}

executable {{name}}-example01
  if flag(examples)
    buildable: True
  else
    buildable: False

  hs-source-dirs:     examples
  main-is:            Example01.hs
  default-language:   Haskell2010
  build-depends:
      base                  >= 4.7      && < 5
    , bytestring            >= 0.10     && < 0.11
    , exceptions            >= 0.8      && < 0.9
    , gore-and-ash          >= 2.0      && < 2.1
    , gore-and-ash-logging  >= 3.0      && < 3.1
    , {{name}}
    , mtl                   >= 2.2      && < 2.3
    , text                  >= 1.2.1    && < 1.3

  default-extensions:
    BangPatterns
    DeriveFunctor
    DeriveGeneric
    FlexibleContexts
    FlexibleInstances
    FunctionalDependencies
    GeneralizedNewtypeDeriving
    MultiParamTypeClasses
    OverloadedStrings
    RecordWildCards
    ScopedTypeVariables
    StandaloneDeriving
    TypeFamilies
    UndecidableInstances

  ghc-options: -threaded

{-# START_FILE {{name}}.sublime-project #-}
{
  "build_systems":
  [
    {
      "name": "Stack",
      "shell_cmd": "stack install",
      "working_dir": "${project_path}"
    },
    {
      "name": "Stack pedantic",
      "shell_cmd": "stack install --pedantic",
      "working_dir": "${project_path}"
    },
    {
      "name": "Stack profile",
      "shell_cmd": "stack install --profile",
      "working_dir": "${project_path}"
    },
    {
      "name": "Stack haddock",
      "shell_cmd": "stack haddock --no-haddock-deps",
      "working_dir": "${project_path}"
    },
    {
      "name": "Stack pedantic examples",
      "shell_cmd": "stack install --pedantic --flag {{name}}:examples",
      "working_dir": "${project_path}"
    }
  ],
  "folders":
  [
    {
      "path": "."
    }
  ]
}

{-# START_FILE stack.yaml #-}
# This file was automatically generated by 'stack init'
#
# Some commonly used options have been documented as comments in this file.
# For advanced use and comprehensive documentation of the format, please see:
# http://docs.haskellstack.org/en/stable/yaml_configuration/

# Resolver to choose a 'specific' stackage snapshot or a compiler version.
# A snapshot resolver dictates the compiler version and the set of packages
# to be used for project dependencies. For example:
#
# resolver: lts-3.5
# resolver: nightly-2015-09-21
# resolver: ghc-7.10.2
# resolver: ghcjs-0.1.0_ghc-7.10.2
# resolver:
#  name: custom-snapshot
#  location: "./custom-snapshot.yaml"
resolver: lts-7.16

# User packages to be built.
# Various formats can be used as shown in the example below.
#
# packages:
# - some-directory
# - https://example.com/foo/bar/baz-0.0.2.tar.gz
# - location:
#    git: https://github.com/commercialhaskell/stack.git
#    commit: e7b331f14bcffb8367cd58fbfc8b40ec7642100a
# - location: https://github.com/commercialhaskell/stack/commit/e7b331f14bcffb8367cd58fbfc8b40ec7642100a
#   extra-dep: true
#  subdirs:
#  - auto-update
#  - wai
#
# A package marked 'extra-dep: true' will only be built if demanded by a
# non-dependency (i.e. a user package), and its test suites and benchmarks
# will not be run. This is useful for tweaking upstream packages.
packages:
- '.'
- location:
    git: https://github.com/reflex-frp/reflex.git
    commit: 4eb436e0d94418c11e4c06be7fa982d59629c9a9
  extra-dep: true
- location:
    git: https://github.com/bennofs/reflex-host.git
    commit: 4701a7b99f8825f7c2bf3b50609a5ba2f622a654
  extra-dep: true
- location:
    git: https://github.com/teaspot-studio/gore-and-ash.git
    commit: 29e0bf26f60b252debc5f8e6828ddaa09d32becf
  extra-dep: true
- location:
    git: https://github.com/teaspot-studio/gore-and-ash-logging.git
    commit: a1a1eb79585f94e85c6341d7fd9fd109694da9eb
  extra-dep: true


# Dependency packages to be pulled from upstream that are not in the resolver
# (e.g., acme-missiles-0.3)
extra-deps:
- gore-and-ash-2.0.0.0
- gore-and-ash-logging-3.0.0.0
- prim-uniq-0.1.0.1
- ref-tf-0.4.0.1

# Override default flag values for local packages and extra-deps
flags: {}

# Extra package databases containing global packages
extra-package-dbs: []

# Control whether we use the GHC we find on the path
# system-ghc: true
#
# Require a specific version of stack, using version ranges
# require-stack-version: -any # Default
# require-stack-version: ">=1.3"
#
# Override the architecture used by stack, especially useful on Windows
# arch: i386
# arch: x86_64
#
# Extra directories used by stack for building
# extra-include-dirs: [/path/to/dir]
# extra-lib-dirs: [/path/to/dir]
#
# Allow a newer minor version of GHC than the snapshot specifies
# compiler-check: newer-minor
{-# START_FILE examples/Example01.hs #-}
module Main where

import Control.Monad.Catch
import Control.Monad.Except
import Data.Proxy

import Game.GoreAndAsh.Core
import Game.GoreAndAsh.Logging
import Game.GoreAndAsh.{{module-name}}
import Game.GoreAndAsh.Time

type AppStack t = {{module-name}}T t (LoggingT t (TimerT t (GameMonad t)))

newtype AppMonad t a = AppMonad { runAppMonad :: AppStack t a}
  deriving (Functor, Applicative, Monad, MonadFix)

app :: forall t m . (Monad{{module-name}} t m) => m ()
app = exampleFunc

main :: IO ()
main = runSpiderHost $ hostApp $ runModule opts (app :: AppMonad Spider ())

opts :: {{module-name}}Options ()
opts = {{module-name}}Options {
    {{field-prefix}}OptsNext = ()
  }

-- Boilerplate below

deriving instance (ReflexHost t, MonadCatch (HostFrame t)) => MonadCatch (AppMonad t)
deriving instance (ReflexHost t, MonadThrow (HostFrame t)) => MonadThrow (AppMonad t)
deriving instance (ReflexHost t, MonadMask (HostFrame t)) => MonadMask (AppMonad t)
deriving instance (ReflexHost t, MonadIO (HostFrame t)) => MonadIO (AppMonad t)
deriving instance (ReflexHost t, MonadIO (HostFrame t)) => Monad{{module-name}} t (AppMonad t)
deriving instance (ReflexHost t, MonadIO (HostFrame t)) => TimerMonad t (AppMonad t)
deriving instance (ReflexHost t, MonadIO (HostFrame t)) => LoggingMonad t (AppMonad t)
deriving instance (ReflexHost t) => MonadSample t (AppMonad t)
deriving instance (ReflexHost t) => MonadHold t (AppMonad t)
deriving instance (ReflexHost t) => MonadSubscribeEvent t (AppMonad t)

instance ReflexHost t => MonadReflexCreateTrigger t (AppMonad t) where
  newEventWithTrigger = AppMonad . newEventWithTrigger
  newFanEventWithTrigger trigger = AppMonad $ newFanEventWithTrigger trigger

instance (ReflexHost t, MonadIO (HostFrame t)) => MonadAppHost t (AppMonad t) where
  getFireAsync = AppMonad getFireAsync
  getRunAppHost = do
    runner <- AppMonad getRunAppHost
    return $ \m -> runner $ runAppMonad m
  performPostBuild_ = AppMonad . performPostBuild_
  liftHostFrame = AppMonad . liftHostFrame

instance (ReflexHost t, MonadIO (HostFrame t)) => GameModule t (AppMonad t) where
  type ModuleOptions t (AppMonad t) = ModuleOptions t (AppStack t)
  runModule os m = runModule os $ runAppMonad m
  withModule t _ = withModule t (Proxy :: Proxy (AppStack t))

{-# START_FILE src/Game/GoreAndAsh/{{module-name}}/API.hs #-}
{-|
Module      : Game.GoreAndAsh.{{module-name}}.API
Description : API of resource module
Copyright   : (c) Anton Gushcha, 2016-2017
                  Anatoly Nardid, 2016-2017
License     : BSD3
Maintainer  : ncrashed@gmail.com
Stability   : experimental
Portability : POSIX

The module contains public API for {{module-docs-name}} module.
-}
module Game.GoreAndAsh.{{module-name}}.API(
    Monad{{module-name}}(..)
  ) where

import Control.Monad.Trans
import Game.GoreAndAsh

-- | Public API of resouce module.
--
-- You can use like a mtl type class:
--
-- @
-- foo :: (Monad{{module-name}} t m, LoggingMonad t m) => m ()
-- @
class MonadAppHost t m => Monad{{module-name}} t m | m -> t where
  exampleFunc :: m ()

instance {-# OVERLAPPABLE #-} (MonadTrans mt, MonadAppHost t (mt m), Monad{{module-name}} t m)
  => Monad{{module-name}} t (mt m) where

  exampleFunc = lift exampleFunc
  {-# INLINE exampleFunc #-}

{-# START_FILE src/Game/GoreAndAsh/{{module-name}}/Module.hs #-}
{-|
Module      : Game.GoreAndAsh.{{module-name}}.Module
Description : Internal implementation of public API of {{module-docs-name}} game module
Copyright   : (c) Anton Gushcha, 2016-2017
                  Anatoly Nardid, 2016-2017
License     : BSD3
Maintainer  : ncrashed@gmail.com
Stability   : experimental
Portability : POSIX

The module defines implementation of {{module-docs-name}} game module. You are
interested only in a '{{module-name}}T' and '{{module-name}}Options' types as '{{module-name}}T'
should be placed in your monad stack to enable 'Monad{{module-name}}' API in your
application.

@
type AppStack t = {{module-name}}T t (LoggingT t (TimerT t (GameMonad t)))

newtype AppMonad t a = AppMonad { runAppMonad :: AppStack t a}
  deriving (Functor, Applicative, Monad, MonadFix)
@

And you will need some boilerplate code for instance deriving, see
`examples/Example01.hs` for full example.

-}
module Game.GoreAndAsh.{{module-name}}.Module(
    {{module-name}}Options(..)
  , {{module-name}}T(..)
  ) where

import Control.Monad.Base
import Control.Monad.Catch
import Control.Monad.Fix
import Control.Monad.IO.Class
import Control.Monad.Reader
import Control.Monad.Trans.Control
import Data.Proxy

import Game.GoreAndAsh
import Game.GoreAndAsh.{{module-name}}.API

-- | Options that are passed to 'runModule' at application startup.
--
-- [@s@] The nested options of next module in stack. Options are layered the
-- similar way as parts of monad transformers.
data {{module-name}}Options s = {{module-name}}Options {
  {{field-prefix}}OptsNext   :: s -- ^ Nested options of next game module
}

-- | Internal environment of game module
data {{module-name}}Env t = {{module-name}}Env {
  -- | Options that were used to create the module
  {{field-prefix}}EnvOptions    :: {{module-name}}Options ()
}

-- | Create a new environment for game module
new{{module-name}}Env :: MonadAppHost t m => {{module-name}}Options s -> m ({{module-name}}Env t)
new{{module-name}}Env opts = do
  return {{module-name}}Env {
      {{field-prefix}}EnvOptions = opts { {{field-prefix}}OptsNext = () }
    }

-- | Implementation of 'Monad{{module-name}}' API.
--
-- [@t@] FRP engine, you could ignore this parameter as it resolved only at main
-- function of your application.
--
-- [@m@] Underlying game modules, next layer in monad stack.
--
-- [@a@] Result of computation.
--
-- How to embed the monad into your app:
--
-- @
-- type AppStack t = {{module-name}}T t (LoggingT t (TimerT t (GameMonad t)))
--
-- newtype AppMonad t a = AppMonad { runAppMonad :: AppStack t a}
--   deriving (Functor, Applicative, Monad, MonadFix)
-- @
--
-- And you will need some boilerplate code for instance deriving, see
-- `examples/Example01.hs` for full example.
--
newtype {{module-name}}T t m a = {{module-name}}T { run{{module-name}}T :: ReaderT ({{module-name}}Env t) m a }
  deriving (Functor, Applicative, Monad, MonadReader ({{module-name}}Env t), MonadFix
    , MonadIO, MonadThrow, MonadCatch, MonadMask, MonadSample t, MonadHold t)

instance {-# OVERLAPPING #-} MonadAppHost t m => Monad{{module-name}} t ({{module-name}}T t m) where
  exampleFunc = return ()
  {-# INLINE exampleFunc #-}

-- Boilerplate

instance MonadTrans ({{module-name}}T t) where
  lift = {{module-name}}T . lift

instance MonadReflexCreateTrigger t m => MonadReflexCreateTrigger t ({{module-name}}T t m) where
  newEventWithTrigger = lift . newEventWithTrigger
  newFanEventWithTrigger initializer = lift $ newFanEventWithTrigger initializer

instance MonadSubscribeEvent t m => MonadSubscribeEvent t ({{module-name}}T t m) where
  subscribeEvent = lift . subscribeEvent

instance MonadAppHost t m => MonadAppHost t ({{module-name}}T t m) where
  getFireAsync = lift getFireAsync
  getRunAppHost = do
    runner <- {{module-name}}T getRunAppHost
    return $ \m -> runner $ run{{module-name}}T m
  performPostBuild_ = lift . performPostBuild_
  liftHostFrame = lift . liftHostFrame

instance MonadTransControl ({{module-name}}T t) where
  type StT ({{module-name}}T t) a = StT (ReaderT ({{module-name}}Env t)) a
  liftWith = defaultLiftWith {{module-name}}T run{{module-name}}T
  restoreT = defaultRestoreT {{module-name}}T

instance MonadBase b m => MonadBase b ({{module-name}}T t m) where
  liftBase = {{module-name}}T . liftBase

instance (MonadBaseControl b m) => MonadBaseControl b ({{module-name}}T t m) where
  type StM ({{module-name}}T t m) a = ComposeSt ({{module-name}}T t) m a
  liftBaseWith     = defaultLiftBaseWith
  restoreM         = defaultRestoreM

instance (MonadIO (HostFrame t), GameModule t m) => GameModule t ({{module-name}}T t m) where
  type ModuleOptions t ({{module-name}}T t m) = {{module-name}}Options (ModuleOptions t m)
  runModule opts ({{module-name}}T m) = do
    s <- new{{module-name}}Env opts
    runModule ({{field-prefix}}OptsNext opts) $ runReaderT m s
  withModule t _ = withModule t (Proxy :: Proxy m)


{-# START_FILE src/Game/GoreAndAsh/{{module-name}}.hs #-}
{-|
Module      : Game.GoreAndAsh.{{module-name}}
Description : Top module of game module for Gore&Ash engine for {{module-docs-name}} handling.
Copyright   : (c) Anton Gushcha, 2016-2017
                  Anatoly Nardid, 2016-2017
License     : BSD3
Maintainer  : ncrashed@gmail.com
Stability   : experimental
Portability : POSIX
-}
module Game.GoreAndAsh.{{module-name}}(
    Monad{{module-name}}(..)
  , {{module-name}}T(..)
  , {{module-name}}Options(..)
  ) where

import Game.GoreAndAsh.{{module-name}}.Module
import Game.GoreAndAsh.{{module-name}}.API
